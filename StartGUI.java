/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AppPackage;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;







class MyCustomCSVFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".csv" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "CSV documents (*.csv)";
        }
    } 

/**
 *
 * @author nathanmarks
 */
public class StartGUI  extends javax.swing.JFrame  {
    
    
    //my variables
    public static String memberFile;
    public static String hoursFile;
    public static String parsedHoursFile;
    
    public static Member[] membersArray;
	
    public static BufferedReader br = null;
    public static String line = "";
    public static String cvsSplitBy = ",";
    
    
    public static ArrayList<Member> membersList = new ArrayList<Member>();
    public static ArrayList<String> lineList = new ArrayList<String>();
	
    //there are only 11 inputs, but people might put their own commas in
    public static String inputSection[] = new String[40]; //40 to allow for as many new questions to be added as need w/out a problem
    public static String inputSectionEnsuingLine[] = new String[40]; //40 to allow for as many new questions to be added as need w/out a problem

    
    public static int lineCounter = 1;
	
    public static FileWriter fstream;
    public static Scanner scanner = new Scanner(System.in);
    public static String userInput;
    Boolean membersInitialized = false;
    Boolean hoursParsed = false;
    boolean duplicate = false;
    int ensuingLinesToCheck = 10;
    
    int duplicateCount = 0;
    
    public double tutoringTarget;
    public double sponsoredTarget;
    public double unsponsoredTarget;
    

    /**
     * Creates new form StartGUI
     */
    public StartGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        initMembersButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        parseHoursButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        printHoursButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTutoringSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jUnsponsoredSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jSponsoredSpinner = new javax.swing.JSpinner();

        fileChooser.setDialogTitle("Open dialog");
        fileChooser.setFileFilter(new MyCustomCSVFilter ());

        jTextField1.setText("jTextField1");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NHS Hours Parser");
        setResizable(false);

        jLabel1.setText("Select the .csv of the list of members.");

        initMembersButton.setText("Initialize Members");
        initMembersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initMembersButtonActionPerformed(evt);
            }
        });

        textarea.setEditable(false);
        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        jLabel2.setText("Select the .csv of the completed hours.");

        parseHoursButton.setText("Parse Hours");
        parseHoursButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseHoursButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Select the .csv over which you would like the copy the updated hours.");

        printHoursButton.setText("Select File");
        printHoursButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printHoursButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("If you don't already have a .csv file over which you would like to copy,");

        jLabel5.setText("you will need to make one.");

        jLabel6.setText("Tutoring Target:");

        jLabel7.setText("Sponsored Target:");

        jLabel8.setText("Unsponsored Target:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel5)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(41, 41, 41)
                                        .addComponent(jLabel7)
                                        .addGap(10, 10, 10))
                                    .addComponent(initMembersButton))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(printHoursButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(parseHoursButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jTutoringSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addComponent(jSponsoredSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(jUnsponsoredSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel2)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(initMembersButton)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTutoringSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSponsoredSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUnsponsoredSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(parseHoursButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(12, 12, 12)
                .addComponent(printHoursButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initMembersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initMembersButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            
            // What to do with the file, e.g. display it in a TextArea
                  
            memberFile = file.getAbsolutePath();
            System.out.println(file.getAbsolutePath());
            
            try
            {    
                br = new BufferedReader(new FileReader(memberFile));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("The file was unable to be read. \n");
            }
                    
            try 
            {
                int commaPos;
                //figure out how many lines (and people) there are and add them to the arraylist
                while ((line = br.readLine()) != null)
                {
                    commaPos = line.indexOf(",");
                    membersList.add(new Member(line.substring(0, commaPos)));
                    //System.out.println("New member added.");
                }
                textarea.append("Members initialized successfully. \n");
                membersInitialized = true;
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                textarea.append("Members NOT initialized successfully. \n");

            }
            
            /*
            	while (true)
			{
				
				System.out.println("Type a number to find the name of that individual.");
				userInput = scanner.nextLine();
				System.out.println(membersList.get(Integer.parseInt(userInput)).getName());

			}
            */
            

        }     
        
        
    }//GEN-LAST:event_initMembersButtonActionPerformed

    private void parseHoursButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseHoursButtonActionPerformed
       
       System.out.println("The parse hours button has been hit.");
       if (membersInitialized)
       {    
       
            int returnVal = fileChooser.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
                File file = fileChooser.getSelectedFile();
                hoursFile = file.getAbsolutePath();
                try 
                {
                    br = new BufferedReader(new FileReader(hoursFile));
                } 
                catch (FileNotFoundException ex) 
                {     
                        Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("The file was not found.");
                        textarea.append("The file was not found. \n");                
                }        

                try 
                {
                    while ((line = br.readLine()) != null)
                    {
                        if (lineCounter == 1)
                        {
                            //the first line is the questions
                            lineCounter++;
                            System.out.println("The first line is done.");
                        }
                        else
                        {
                            lineList.add(line);
                            lineCounter++;
                            // System.out.println("A line has been added.");
                            //System.out.println("Line added to lineList");
                        }
                    }
                } 
                catch (IOException ex1) 
                {
                    Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex1);
                    System.out.println("Something went wrong with the linecounter");
                }

                System.out.println("lineList size: " + lineList.size());


                //goes through each line
                for (int i = 0; i < lineList.size(); i ++)
                {
                    duplicate = false;
                    //System.out.println("i = " + i);
                    
                    inputSection = lineList.get(i).split(",");
                    
                    if (lineList.size() - i < ensuingLinesToCheck)
                        ensuingLinesToCheck = lineList.size() - i;
                    
                    //Duplicate checking
                    
                    
                    
                    for (int ensuingLine = 1; ensuingLine < ensuingLinesToCheck; ensuingLine++)
                    {
                        
                        inputSectionEnsuingLine = lineList.get(i + ensuingLine).split(",");
                        
                        //people sometimes submit everything the same except for the date
                        //make sure date is different
                        if (inputSection[3].equals(inputSectionEnsuingLine[3]))
                        {
                            duplicateCount = 0;
                            for (int inputSectionNumber = 1; inputSectionNumber <= 7; inputSectionNumber++)
                            {
                                if (inputSection[inputSectionNumber].equals(inputSectionEnsuingLine[inputSectionNumber]))
                                {
                                    duplicateCount++;
                                }
                            }
                            if (duplicateCount == 7)
                            {
                                duplicate = true;
                                break;
                            }
                        }
                    }
                    
                    
                    if (!duplicate)
                    {
                        //checks each member with the name from the line
                        for (int x = 0; x < membersList.size(); x++)
                        {

                                /*
                                System.out.println("x is " + x);
                                System.out.println("i is " + i);
                                System.out.println("lineList.get(i) is " + lineList.get(i));
                                System.out.println("inputSection length: " + inputSection.length);
                                //there might be something wrong in this line
                                System.out.println("inputSection[3] is " + inputSection[1]);//changed to some random number for testing
                                */
                                //remove all the new lines in the user input

                            //a brief sleep to allow the error message to print all together
                            /*
                            try {
                                Thread.sleep(10);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            */
                            if (membersList.get(x).getName().equals(inputSection[1]/* + ","*/))
                            {
                                //check the type of hour
                                switch (inputSection[2]) 
                                {
                                    case "Sponsored":
                                        membersList.get(x).setSponsoredHours(membersList.get(x).getSponsoredHours() + Double.parseDouble(inputSection[4]));
                                        break;
                                    case "Unsponsored":
                                        membersList.get(x).setUnsponsoredHours(membersList.get(x).getUnsponsoredHours() + Double.parseDouble(inputSection[4]));
                                        break;
                                    case "Tutoring":
                                        membersList.get(x).setTutoringHours(membersList.get(x).getTutoringHours() + Double.parseDouble(inputSection[4]));
                                        break;
                                    case "Sponsored Tutoring":
                                        membersList.get(x).setSponsoredTutoringHours(membersList.get(x).getSponsoredTutoringHours() + Double.parseDouble(inputSection[4]));
                                        break;
                                    default:
                                        System.out.println("Something went wrong! None of the hour types matched the input in inputSection[2].");
                                        break;
                                }
                                break;
                            }
                        }
                    }
                }

                        /*
                        * if (tutoring < 5)
                        * {
                        * 	fill up tutoring with sponsored tutoring
                        *
                        * 	holder = 5-tutoring
                        * 	if (sponsored tutoring <= holder)
                        * 	{
                        * 		add sponsored tutoring to tutoring
                        * 		clear sponsored tutoring
                        * 	}
                        * 	else //sponsored tutoring > holder
                        * 	{
                        * 		tutoring = tutoring + holder
                        * 		sponsored tutoring = sponsored tutoring - holder
                        * 	}
                        * }
                        *
                        * if (tutoring >= 5)
                        * {
                        * 	fill up sponsored with sponsored tutoring
                        *		clear sponsored tutoring
                        *
                        * 	fill up unsponsored with excess tutoring (use holder)
                        * 	bring tutoring down to 3
                        * }

                        * if (sponsored >= 10)
                        * {
                        * 	fill up unsponsored with sponsored
                        * }
                        */

                //System.out.println("jTutoringSpinner.getValue(): " + jTutoringSpinner.getValue());
                tutoringTarget = (double)((int)jTutoringSpinner.getValue());
                sponsoredTarget = (double)((int)jSponsoredSpinner.getValue());
                unsponsoredTarget = (double)((int)jUnsponsoredSpinner.getValue());
                
                //System.out.println("tutoringTarget: " + tutoringTarget);
                //System.out.println("sponsoredTarget: " + sponsoredTarget);
                //System.out.println("unsponsoredTarget: " + unsponsoredTarget);


                        
                for (int i = 0; i < membersList.size(); i++)
                {
                    double holder;

                    if (membersList.get(i).getTutoringHours() < tutoringTarget)
                    {
                        holder = tutoringTarget - membersList.get(i).getTutoringHours();
                        if (membersList.get(i).getSponsoredTutoringHours() <= holder)
                        {
                            membersList.get(i).setTutoringHours(membersList.get(i).getTutoringHours() + membersList.get(i).getSponsoredTutoringHours());
                            membersList.get(i).setSponsoredTutoringHours(0);
                        }
                        else //there are more sponsored tutoring hours than needed to fill up all tutoring hours
                        {
                            membersList.get(i).setTutoringHours(membersList.get(i).getTutoringHours() + holder);
                            membersList.get(i).setSponsoredTutoringHours(membersList.get(i).getSponsoredTutoringHours() - holder);
                        }
                    }

                    if (membersList.get(i).getTutoringHours() >= tutoringTarget)
                    {
                        membersList.get(i).setSponsoredHours(membersList.get(i).getSponsoredHours() + membersList.get(i).getSponsoredTutoringHours());
                        membersList.get(i).setSponsoredTutoringHours(0);

                        holder = membersList.get(i).getTutoringHours() - tutoringTarget;
                        membersList.get(i).setUnsponsoredHours(membersList.get(i).getUnsponsoredHours() + holder);
                        membersList.get(i).setTutoringHours(membersList.get(i).getTutoringHours() - holder);
                    }

                    if (membersList.get(i).getSponsoredHours() > sponsoredTarget)
                    {
                        holder = membersList.get(i).getSponsoredHours() - sponsoredTarget;
                        membersList.get(i).setUnsponsoredHours(membersList.get(i).getUnsponsoredHours() + holder);
                        membersList.get(i).setSponsoredHours(membersList.get(i).getSponsoredHours() - holder);
                    }

                }


                /*
                //print out each members' hours
                for (int i = 0; i < membersList.size(); i ++)
                {
                    System.out.println(membersList.get(i).getName() + " has " + membersList.get(i).getSponsoredHours() + " sponsored hours, " + membersList.get(i).getUnsponsoredHours() + " unsponsored hours, " + membersList.get(i).getTutoringHours() + " tutoring hours, and " + membersList.get(i).getSponsoredTutoringHours() + " sponsored tutoring hours.");    
                }
                */

            } 
       textarea.append("Done parsing hours. \n");
       hoursParsed = true;
       }
       else
           textarea.append("The members have not yet been initialized. \n");

 
    }//GEN-LAST:event_parseHoursButtonActionPerformed

    private void printHoursButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printHoursButtonActionPerformed
        
        if (hoursParsed)
        {
        
            int returnVal = fileChooser.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION)
            {

                try {

                    File file = fileChooser.getSelectedFile();
                    parsedHoursFile = file.getAbsolutePath();
                    try {
                        fstream = new FileWriter(parsedHoursFile);
                    } catch (IOException ex) {
                        Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    BufferedWriter out = new BufferedWriter(fstream);


                    out.write("Name");
                    out.write(",");
                    out.write("Hours Completed?");
                    out.write(",");
                    out.write("Sponsored Hours (Target: " + sponsoredTarget + ")");
                    out.write(",");
                    out.write("Unsponsored Hours (Target: " + unsponsoredTarget + ")");
                    out.write(",");
                    out.write("Tutoring Hours (Target: " + tutoringTarget + ")");
                    out.newLine();
                    
                    
                    System.out.println("jTutoringSpinner.getValue(): " + jTutoringSpinner.getValue());
                    System.out.println("jSponsoredSpinner.getValue(): " + jSponsoredSpinner.getValue());
                    System.out.println("jUnsponsoredSpinner.getValue(): " + jUnsponsoredSpinner.getValue());


                    tutoringTarget = (double)((int)jTutoringSpinner.getValue());
                    sponsoredTarget = (double)((int)jSponsoredSpinner.getValue());
                    unsponsoredTarget = (double)((int)jUnsponsoredSpinner.getValue());

                    
                    //was i = 0
                    for (int i = 0; i < membersList.size(); i++)
                    {
                        //put an * in front of everything if all hours are done for conditional highlighting
                        if (membersList.get(i).getSponsoredHours() == sponsoredTarget && membersList.get(i).getUnsponsoredHours() >= unsponsoredTarget && membersList.get(i).getTutoringHours() == tutoringTarget)
                        {
                            out.write("*");
                            out.write(membersList.get(i).getName() + ",");
                            //no comma needed here because the name already has a comma
                            out.write("*");
                            out.write("YES");
                            out.write(",");
                            out.write("*");
                            out.write((String.valueOf(membersList.get(i).getSponsoredHours())));
                            out.write(",");
                            out.write("*");
                            out.write((String.valueOf(membersList.get(i).getUnsponsoredHours())));
                            out.write(",");
                            out.write("*");
                            out.write((String.valueOf(membersList.get(i).getTutoringHours())));
                            out.newLine();
                        }
                        else //not all hours are done
                        {                           
                            out.write(membersList.get(i).getName() + ",");
                                                                       
                            out.write(" ");
                            
                            out.write(",");
                            
                            out.write((String.valueOf(membersList.get(i).getSponsoredHours())));
                            System.out.println((String.valueOf(membersList.get(i).getSponsoredHours())));
                            
                            out.write(",");
                            
                            out.write((String.valueOf(membersList.get(i).getUnsponsoredHours())));
                            System.out.println((String.valueOf(membersList.get(i).getUnsponsoredHours())));

                            
                            out.write(",");
                            
                            out.write((String.valueOf(membersList.get(i).getTutoringHours())));
                            System.out.println((String.valueOf(membersList.get(i).getTutoringHours())));
                            
                            out.newLine();
                        }
                    }

                    //out.write("Hey this is a test");

                    out.flush();
                    out.close();

                    textarea.append("Done. Check where you put the file \n to make sure it's correctly updated. \n");

                } catch (IOException ex) {
                    Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }    
        }
        else
            textarea.append("The hours are not yet parsed. \n");
    }//GEN-LAST:event_printHoursButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton initMembersButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSponsoredSpinner;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JSpinner jTutoringSpinner;
    private javax.swing.JSpinner jUnsponsoredSpinner;
    private javax.swing.JButton parseHoursButton;
    private javax.swing.JButton printHoursButton;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables
}
